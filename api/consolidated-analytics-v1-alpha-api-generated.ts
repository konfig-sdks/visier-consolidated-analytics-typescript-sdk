/* tslint:disable */
/* eslint-disable */
/*
Visier Consolidated Analytics APIs

Visier APIs for managing consolidated analytics (CA) tenants.

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConsolidatedAnalyticsAPIExcludedSourcesListDTO } from '../models';
// @ts-ignore
import { ConsolidatedAnalyticsAPISourceTenantListDTO } from '../models';
// @ts-ignore
import { ConsolidatedAnalyticsAPITenantCreateRequestDTO } from '../models';
// @ts-ignore
import { ConsolidatedAnalyticsAPITenantListResponseDTO } from '../models';
// @ts-ignore
import { ExcludedSourcesBody } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { TenantCodeBody } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConsolidatedAnalyticsV1AlphaApi - axios parameter creator
 * @export
 */
export const ConsolidatedAnalyticsV1AlphaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API adds excluded sources to the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Add excluded sources to a consolidated analytics tenant
         * @param {ExcludedSourcesBody} excludedSourcesBody 
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExcludedSources: async (excludedSourcesBody: ExcludedSourcesBody, tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'excludedSourcesBody' is not null or undefined
            assertParamExists('addExcludedSources', 'excludedSourcesBody', excludedSourcesBody)
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: excludedSourcesBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(excludedSourcesBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API adds source tenants to the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Add source tenants to a consolidated analytics tenant
         * @param {TenantCodeBody} tenantCodeBody 
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {number} [limit] The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSourceTenants: async (tenantCodeBody: TenantCodeBody, tenantId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantCodeBody' is not null or undefined
            assertParamExists('addSourceTenants', 'tenantCodeBody', tenantCodeBody)
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tenantCodeBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tenantCodeBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to create a consolidated analytics tenant.   A new CA tenant has no source tenants and no excluded sources.   **Note:** CA tenant codes must have a prefix of CA. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Create a consolidated analytics tenant
         * @param {ConsolidatedAnalyticsAPITenantCreateRequestDTO} consolidatedAnalyticsAPITenantCreateRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant: async (consolidatedAnalyticsAPITenantCreateRequestDTO: ConsolidatedAnalyticsAPITenantCreateRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consolidatedAnalyticsAPITenantCreateRequestDTO' is not null or undefined
            assertParamExists('createTenant', 'consolidatedAnalyticsAPITenantCreateRequestDTO', consolidatedAnalyticsAPITenantCreateRequestDTO)
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: consolidatedAnalyticsAPITenantCreateRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(consolidatedAnalyticsAPITenantCreateRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve a CA tenant\'s excluded sources.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a consolidated analytics tenant\'s excluded sources
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExcludedSources: async (tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve a CA tenant\'s source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a consolidated analytics tenant\'s source tenants
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {number} [limit] The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
         * @param {number} [start] The starting index of the first source tenant to return. Default is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTenants: async (tenantId?: string, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the full list of consolidated analytics tenants in your administrating tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all consolidated analytics tenants
         * @param {number} [limit] The maximum number of tenants to return. The maximum value is 1000. Default is 400.
         * @param {number} [start] The starting index of the first tenant to return. Default is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenants: async (limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API removes excluded sources from the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Remove excluded sources from a consolidated analytics tenants
         * @param {ExcludedSourcesBody} excludedSourcesBody 
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExcludedSources: async (excludedSourcesBody: ExcludedSourcesBody, tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'excludedSourcesBody' is not null or undefined
            assertParamExists('removeExcludedSources', 'excludedSourcesBody', excludedSourcesBody)
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: excludedSourcesBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(excludedSourcesBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API removes source tenants from the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Remove source tenants from a consolidated analytics tenants
         * @param {TenantCodeBody} tenantCodeBody 
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {number} [limit] The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSourceTenants: async (tenantCodeBody: TenantCodeBody, tenantId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantCodeBody' is not null or undefined
            assertParamExists('removeSourceTenants', 'tenantCodeBody', tenantCodeBody)
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tenantCodeBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tenantCodeBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API defines the excluded sources for a consolidated analytics tenant.   After you create a CA tenant, you may optionally define a list of excluded sources. The excluded sources are the sources whose data is excluded from the CA tenant.  You can also use this API to replace the list of excluded sources for an existing CA tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Set a consolidated analytics tenant\'s excluded sources
         * @param {ExcludedSourcesBody} excludedSourcesBody 
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExcludedSources: async (excludedSourcesBody: ExcludedSourcesBody, tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'excludedSourcesBody' is not null or undefined
            assertParamExists('setExcludedSources', 'excludedSourcesBody', excludedSourcesBody)
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: excludedSourcesBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/excluded-sources',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(excludedSourcesBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API defines the source tenants for a consolidated analytics tenant.   After you create a CA tenant, you must define a list of its source tenants. The source tenants are the tenants whose data is aggregated in the CA tenant.  You can also use this API to replace the list of source tenants for an existing CA tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Set a consolidated analytics tenant\'s source tenants
         * @param {TenantCodeBody} tenantCodeBody 
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
         * @param {number} [limit] The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSourceTenants: async (tenantCodeBody: TenantCodeBody, tenantId?: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantCodeBody' is not null or undefined
            assertParamExists('setSourceTenants', 'tenantCodeBody', tenantCodeBody)
            const localVarPath = `/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tenantCodeBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/admin/consolidated-analytics/tenants/:tenantId/source-tenants',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tenantCodeBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsolidatedAnalyticsV1AlphaApi - functional programming interface
 * @export
 */
export const ConsolidatedAnalyticsV1AlphaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsolidatedAnalyticsV1AlphaApiAxiosParamCreator(configuration)
    return {
        /**
         * This API adds excluded sources to the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Add excluded sources to a consolidated analytics tenant
         * @param {ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>> {
            const excludedSourcesBody: ExcludedSourcesBody = {
                excludedSources: requestParameters.excludedSources
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addExcludedSources(excludedSourcesBody, requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API adds source tenants to the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Add source tenants to a consolidated analytics tenant
         * @param {ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO>> {
            const tenantCodeBody: TenantCodeBody = {
                tenantCodes: requestParameters.tenantCodes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSourceTenants(tenantCodeBody, requestParameters.tenantId, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to create a consolidated analytics tenant.   A new CA tenant has no source tenants and no excluded sources.   **Note:** CA tenant codes must have a prefix of CA. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Create a consolidated analytics tenant
         * @param {ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenant(requestParameters: ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPITenantCreateRequestDTO>> {
            const consolidatedAnalyticsAPITenantCreateRequestDTO: ConsolidatedAnalyticsAPITenantCreateRequestDTO = {
                tenantCode: requestParameters.tenantCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenant(consolidatedAnalyticsAPITenantCreateRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve a CA tenant\'s excluded sources.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a consolidated analytics tenant\'s excluded sources
         * @param {ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listExcludedSources(requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve a CA tenant\'s source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a consolidated analytics tenant\'s source tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceTenants(requestParameters.tenantId, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the full list of consolidated analytics tenants in your administrating tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all consolidated analytics tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiListTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiListTenantsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPITenantListResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTenants(requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API removes excluded sources from the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Remove excluded sources from a consolidated analytics tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>> {
            const excludedSourcesBody: ExcludedSourcesBody = {
                excludedSources: requestParameters.excludedSources
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeExcludedSources(excludedSourcesBody, requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API removes source tenants from the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Remove source tenants from a consolidated analytics tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO>> {
            const tenantCodeBody: TenantCodeBody = {
                tenantCodes: requestParameters.tenantCodes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSourceTenants(tenantCodeBody, requestParameters.tenantId, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API defines the excluded sources for a consolidated analytics tenant.   After you create a CA tenant, you may optionally define a list of excluded sources. The excluded sources are the sources whose data is excluded from the CA tenant.  You can also use this API to replace the list of excluded sources for an existing CA tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Set a consolidated analytics tenant\'s excluded sources
         * @param {ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO>> {
            const excludedSourcesBody: ExcludedSourcesBody = {
                excludedSources: requestParameters.excludedSources
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setExcludedSources(excludedSourcesBody, requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API defines the source tenants for a consolidated analytics tenant.   After you create a CA tenant, you must define a list of its source tenants. The source tenants are the tenants whose data is aggregated in the CA tenant.  You can also use this API to replace the list of source tenants for an existing CA tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Set a consolidated analytics tenant\'s source tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO>> {
            const tenantCodeBody: TenantCodeBody = {
                tenantCodes: requestParameters.tenantCodes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setSourceTenants(tenantCodeBody, requestParameters.tenantId, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConsolidatedAnalyticsV1AlphaApi - factory interface
 * @export
 */
export const ConsolidatedAnalyticsV1AlphaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsolidatedAnalyticsV1AlphaApiFp(configuration)
    return {
        /**
         * This API adds excluded sources to the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Add excluded sources to a consolidated analytics tenant
         * @param {ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> {
            return localVarFp.addExcludedSources(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API adds source tenants to the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Add source tenants to a consolidated analytics tenant
         * @param {ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO> {
            return localVarFp.addSourceTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to create a consolidated analytics tenant.   A new CA tenant has no source tenants and no excluded sources.   **Note:** CA tenant codes must have a prefix of CA. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Create a consolidated analytics tenant
         * @param {ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant(requestParameters: ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPITenantCreateRequestDTO> {
            return localVarFp.createTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve a CA tenant\'s excluded sources.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a consolidated analytics tenant\'s excluded sources
         * @param {ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> {
            return localVarFp.listExcludedSources(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve a CA tenant\'s source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a consolidated analytics tenant\'s source tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO> {
            return localVarFp.listSourceTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the full list of consolidated analytics tenants in your administrating tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all consolidated analytics tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiListTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiListTenantsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPITenantListResponseDTO> {
            return localVarFp.listTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API removes excluded sources from the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Remove excluded sources from a consolidated analytics tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> {
            return localVarFp.removeExcludedSources(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API removes source tenants from the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Remove source tenants from a consolidated analytics tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO> {
            return localVarFp.removeSourceTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API defines the excluded sources for a consolidated analytics tenant.   After you create a CA tenant, you may optionally define a list of excluded sources. The excluded sources are the sources whose data is excluded from the CA tenant.  You can also use this API to replace the list of excluded sources for an existing CA tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Set a consolidated analytics tenant\'s excluded sources
         * @param {ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPIExcludedSourcesListDTO> {
            return localVarFp.setExcludedSources(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API defines the source tenants for a consolidated analytics tenant.   After you create a CA tenant, you must define a list of its source tenants. The source tenants are the tenants whose data is aggregated in the CA tenant.  You can also use this API to replace the list of source tenants for an existing CA tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Set a consolidated analytics tenant\'s source tenants
         * @param {ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest, options?: AxiosRequestConfig): AxiosPromise<ConsolidatedAnalyticsAPISourceTenantListDTO> {
            return localVarFp.setSourceTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addExcludedSources operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiAddExcludedSources
    */
    readonly tenantId?: string
    
} & ExcludedSourcesBody

/**
 * Request parameters for addSourceTenants operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiAddSourceTenants
    */
    readonly tenantId?: string
    
    /**
    * The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
    * @type {number}
    * @memberof ConsolidatedAnalyticsV1AlphaApiAddSourceTenants
    */
    readonly limit?: number
    
} & TenantCodeBody

/**
 * Request parameters for createTenant operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest = {
    
} & ConsolidatedAnalyticsAPITenantCreateRequestDTO

/**
 * Request parameters for listExcludedSources operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiListExcludedSources
    */
    readonly tenantId?: string
    
}

/**
 * Request parameters for listSourceTenants operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiListSourceTenants
    */
    readonly tenantId?: string
    
    /**
    * The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
    * @type {number}
    * @memberof ConsolidatedAnalyticsV1AlphaApiListSourceTenants
    */
    readonly limit?: number
    
    /**
    * The starting index of the first source tenant to return. Default is 0.
    * @type {number}
    * @memberof ConsolidatedAnalyticsV1AlphaApiListSourceTenants
    */
    readonly start?: number
    
}

/**
 * Request parameters for listTenants operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiListTenantsRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiListTenantsRequest = {
    
    /**
    * The maximum number of tenants to return. The maximum value is 1000. Default is 400.
    * @type {number}
    * @memberof ConsolidatedAnalyticsV1AlphaApiListTenants
    */
    readonly limit?: number
    
    /**
    * The starting index of the first tenant to return. Default is 0.
    * @type {number}
    * @memberof ConsolidatedAnalyticsV1AlphaApiListTenants
    */
    readonly start?: number
    
}

/**
 * Request parameters for removeExcludedSources operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSources
    */
    readonly tenantId?: string
    
} & ExcludedSourcesBody

/**
 * Request parameters for removeSourceTenants operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenants
    */
    readonly tenantId?: string
    
    /**
    * The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
    * @type {number}
    * @memberof ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenants
    */
    readonly limit?: number
    
} & TenantCodeBody

/**
 * Request parameters for setExcludedSources operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiSetExcludedSources
    */
    readonly tenantId?: string
    
} & ExcludedSourcesBody

/**
 * Request parameters for setSourceTenants operation in ConsolidatedAnalyticsV1AlphaApi.
 * @export
 * @interface ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest
 */
export type ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.
    * @type {string}
    * @memberof ConsolidatedAnalyticsV1AlphaApiSetSourceTenants
    */
    readonly tenantId?: string
    
    /**
    * The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
    * @type {number}
    * @memberof ConsolidatedAnalyticsV1AlphaApiSetSourceTenants
    */
    readonly limit?: number
    
} & TenantCodeBody

/**
 * ConsolidatedAnalyticsV1AlphaApiGenerated - object-oriented interface
 * @export
 * @class ConsolidatedAnalyticsV1AlphaApiGenerated
 * @extends {BaseAPI}
 */
export class ConsolidatedAnalyticsV1AlphaApiGenerated extends BaseAPI {
    /**
     * This API adds excluded sources to the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Add excluded sources to a consolidated analytics tenant
     * @param {ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public addExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiAddExcludedSourcesRequest, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).addExcludedSources(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API adds source tenants to the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Add source tenants to a consolidated analytics tenant
     * @param {ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public addSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiAddSourceTenantsRequest, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).addSourceTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to create a consolidated analytics tenant.   A new CA tenant has no source tenants and no excluded sources.   **Note:** CA tenant codes must have a prefix of CA. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}  is the consolidated analytic tenant code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Create a consolidated analytics tenant
     * @param {ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public createTenant(requestParameters: ConsolidatedAnalyticsV1AlphaApiCreateTenantRequest, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).createTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve a CA tenant\'s excluded sources.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a consolidated analytics tenant\'s excluded sources
     * @param {ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public listExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiListExcludedSourcesRequest = {}, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).listExcludedSources(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve a CA tenant\'s source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a consolidated analytics tenant\'s source tenants
     * @param {ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public listSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiListSourceTenantsRequest = {}, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).listSourceTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the full list of consolidated analytics tenants in your administrating tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a list of all consolidated analytics tenants
     * @param {ConsolidatedAnalyticsV1AlphaApiListTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public listTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiListTenantsRequest = {}, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).listTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API removes excluded sources from the list of excluded sources for a consolidated analytics tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Remove excluded sources from a consolidated analytics tenants
     * @param {ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public removeExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiRemoveExcludedSourcesRequest, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).removeExcludedSources(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API removes source tenants from the list of source tenants for a consolidated analytics tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Remove source tenants from a consolidated analytics tenants
     * @param {ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public removeSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiRemoveSourceTenantsRequest, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).removeSourceTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API defines the excluded sources for a consolidated analytics tenant.   After you create a CA tenant, you may optionally define a list of excluded sources. The excluded sources are the sources whose data is excluded from the CA tenant.  You can also use this API to replace the list of excluded sources for an existing CA tenant.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Set a consolidated analytics tenant\'s excluded sources
     * @param {ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public setExcludedSources(requestParameters: ConsolidatedAnalyticsV1AlphaApiSetExcludedSourcesRequest, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).setExcludedSources(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API defines the source tenants for a consolidated analytics tenant.   After you create a CA tenant, you must define a list of its source tenants. The source tenants are the tenants whose data is aggregated in the CA tenant.  You can also use this API to replace the list of source tenants for an existing CA tenant.   If successful, the response returns an updated list of source tenants.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Set a consolidated analytics tenant\'s source tenants
     * @param {ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsolidatedAnalyticsV1AlphaApiGenerated
     */
    public setSourceTenants(requestParameters: ConsolidatedAnalyticsV1AlphaApiSetSourceTenantsRequest, options?: AxiosRequestConfig) {
        return ConsolidatedAnalyticsV1AlphaApiFp(this.configuration).setSourceTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
